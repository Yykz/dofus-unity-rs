file = { SOI ~ fileMember* ~ EOI }
fileMember = { attribute* ~ (class|enum|struct|interface) }

attribute = @{ "[" ~ (!"]" ~ (invalid_string|attribute|string|ANY))* ~ "]"}
invalid_string = { "\"\\\"" }

interface = { modifierVisibility ~ "interface" ~ Ident ~ classInterfaces? ~ interfaceBody }
interfaceBody = { "{" ~ classMember* ~ "}" }

struct = { modifierVisibility ~ structModifier? ~ "struct" ~ Ident ~ classInterfaces? ~ structBody }
structModifier = { "abstract" }
structBody = { "{" ~ classMember* ~ "}" }

enum = { modifierVisibility ~ "enum" ~ Ident ~ enumBody }
enumBody = { "{" ~ (attribute* ~ field)* ~ "}" }

class = { modifierVisibility ~ classModifier? ~ "class" ~ Ident ~ classInterfaces? ~ classBody }
classInterfaces = { ":" ~ Ident ~ ("," ~ Ident)* }
classModifier = { "sealed"|"static"|"abstract" }
classBody = { "{" ~ classMember* ~ "}" }
classMember = { attribute* ~ (method|field|property) }

method = { modifierVisibility ~ methodModifier* ~ "ref"? ~ Type ~ Ident ~ methodParams ~ (methodBody|";") }
methodParams = { "(" ~ methodParam? ~ ("," ~ methodParam)* ~ ")" }
methodParam = { paramAttr* ~ methodParamModifier? ~ Type ~ (Ident ~ fieldAssignValue?)? }
paramAttr = { "[" ~ ("In"|"Out") ~ "]" }
methodParamModifier = { "out"|"ref"|"in" }
methodModifier = { "override"|"static"|"abstract"|"virtual"|"sealed"|"extern" }
methodBody = { "{" ~ "}" }

property = { modifierVisibility ~ propertyModifier* ~ Type ~ Ident ~ propertyBody }
propertyBody = { "{" ~ (propertyKind ~ ";")+ ~ "}" }
propertyKind = { "get"|"set" }
propertyModifier = { "virtual"|"static"|"override"|"abstract"|"sealed" }

field = { modifierVisibility ~ fieldModifier* ~ Type ~ Ident ~ fieldAssignValue? ~ ";" }
fieldModifier = { "readonly"|"const"|"static" }
fieldAssignValue = { "=" ~ value }
value = { boolean|number|string|char }

modifierVisibility = { "protected internal"|"public"|"private"|"internal"|"protected" }
Tuple = @{ "(" ~ Ident ~ ("," ~ Ident)* ~ ")" }
Ident = @{ ('a'..'z'|"é"|'A'..'Z'|'0'..'9'|"_"|":"|"$"|"-"|"."|"|"|"="|Tuple|generic)+ }
Type = @{ Ident ~ (("[" ~ ","? ~ "]")|"*")* }
generic = { "<" ~ Type? ~ ("," ~ WHITESPACE* ~ Type)* ~ ">" }
number = @{ "-"? ~ (special_const|('0'..'9'+ ~ ("." ~ '0'..'9'+)? ~ ("E" ~ ("-"|"+") ~ '0'..'9'+)?)) }
special_const = { "∞"|"NaN" }
boolean = @{ "True"|"False" }
string = @{ "\"" ~ ( "\\\"" | !("\"") ~ ANY )* ~ "\"" }
char = @{ "'" ~ (!"'" ~ ANY)* ~ "'" }

COMMENT = { ("//" ~ (!"\n" ~ ANY)* ~ "\n")|("/*" ~ (!"*/" ~ ANY)* ~ "*/") }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }